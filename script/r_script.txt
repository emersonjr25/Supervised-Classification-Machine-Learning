library(tidyverse)
library(caret)
library(e1071)
library(class)
library(xgboost)
library(rpart)
library(rpart.plot)
library(randomForest)

dados <- read.csv("C:/Users/emers/OneDrive/Documentos/Supervisioned-Classification-Machine-Learning-main/data/train.csv")

set.seed(1)

colnames(dados)
dim(dados)
head(dados)

colSums(is.na(dados))

variables <- c('Pclass', 'Sex', 'Age', 'Fare')
X <- dados[, variables]
y <- dados[, 'Survived']

#name and ticket maybe
### dealing with nas ###
nas <- colSums(is.na(X))
X <- X %>%
  select(-names(nas[nas > 0]))
X[, names(X) != names(nas[nas > 0])]

#### transforming data ###
X <- X %>%
  mutate(Sex = recode(X$Sex, 'male' = 0, 'female' = 1))
cor(X)

### separating data and machine learning ###
train_index <- createDataPartition(y, p=0.7, list = FALSE)

X_train <- X[train_index, ]
y_train <- y[train_index]

X_test <- X[-train_index, ]
y_test <- y[-train_index]

### model 1 ###
model1 <- glm(y_train ~ ., data = X_train)
prediction1 <- predict(model1, X_test)
binary_data <- function(data){
  if(data >= 0.5){
    data <- 1
  } else{
    data <- 0
  }
}
prediction1 <- sapply(prediction1, binary_data)
confu_mat_table1 <- table(prediction1, y_test)
confu_mat1 <- confusionMatrix(confu_mat_table1)
accuracy1 <- confu_mat1[['overall']][['Accuracy']]
precision1 <- confu_mat1[['byClass']][['Precision']]
recall1 <- confu_mat1[['byClass']][['Recall']]
F1_1 <- confu_mat1[['byClass']][['F1']]
print(paste('accuracy:', accuracy1, 
            'precision:', precision1, 
            'recall:', recall1,
            'F1:', F1_1))

### model 2 ###
model2 <- randomForest(X_train, y_train, ntree=1000, type='class')
prediction2 <- predict(model2, X_test)
prediction2 <- sapply(prediction2, binary_data)
confu_mat_table2 <- table(prediction2, y_test)
confu_mat2 <- confusionMatrix(confu_mat_table2)
accuracy2 <- confu_mat2[['overall']][['Accuracy']]
precision2 <- confu_mat2[['byClass']][['Precision']]
recall2 <- confu_mat2[['byClass']][['Recall']]
F1_2 <- confu_mat2[['byClass']][['F1']]
print(paste('accuracy:', accuracy2, 
            'precision:', precision2, 
            'recall:', recall2,
            'F1:', F1_2))

### model 3 ###
model3 <- rpart(y_train ~ ., data=X_train, maxdepth=5)
prediction3 <- predict(model3, X_test)
prediction3 <- sapply(prediction3, binary_data)
rpart.plot(model3)
confu_mat_table3 <- table(prediction3, y_test)
confu_mat3 <- confusionMatrix(confu_mat_table3)
accuracy3 <- confu_mat3[['overall']][['Accuracy']]
precision3 <- confu_mat3[['byClass']][['Precision']]
recall3 <- confu_mat3[['byClass']][['Recall']]
F1_3 <- confu_mat3[['byClass']][['F1']]
print(paste('accuracy:', accuracy3, 
            'precision:', precision3, 
            'recall:', recall3,
            'F1:', F1_3))

### model 4 ###
model4 <- svm(y_train ~ ., data = X_train)
prediction4 <- predict(model4, X_test)
prediction4 <- sapply(prediction4, binary_data)
confu_mat_table4 <- table(prediction4, y_test)
confu_mat4 <- confusionMatrix(confu_mat_table4)
accuracy4 <- confu_mat4[['overall']][['Accuracy']]
precision4 <- confu_mat4[['byClass']][['Precision']]
recall4 <- confu_mat4[['byClass']][['Recall']]
F1_4 <- confu_mat4[['byClass']][['F1']]
print(paste('accuracy:', accuracy4, 
            'precision:', precision4, 
            'recall:', recall4,
            'F1:', F1_4))

### model 5 ###
model5 <- knn(X_train, X_test, cl=y_train, k=3)
prediction5 <- as.numeric(as.character(model5))
confu_mat_table5 <- table(prediction5, y_test)
confu_mat5 <- confusionMatrix(confu_mat_table5)
accuracy5 <- confu_mat5[['overall']][['Accuracy']]
precision5 <- confu_mat5[['byClass']][['Precision']]
recall5 <- confu_mat5[['byClass']][['Recall']]
F1_5 <- confu_mat5[['byClass']][['F1']]
print(paste('accuracy:', accuracy5, 
            'precision:', precision5, 
            'recall:', recall5,
            'F1:', F1_5))

### model 6 ###
estimators <- c(10, 50, 100, 200, 500)
depth <- c(3, 5, 7, 10, 15)
accuracy <- rep(0, (length(estimators) * length(depth)))
train_xgb <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
time <- 0
informations <- list()
for(i in seq_along(estimators)){
  for(j in seq_along(depth)){
    time <- time + 1
    model6 <- xgboost(train_xgb, nrounds=estimators[i], max_depth=depth[j])
    prediction6 <- predict(model6, as.matrix(X_test))
    prediction6 <- sapply(prediction6, binary_data)
    confu_mat_table6 <- table(prediction6, y_test)
    confu_mat6 <- confusionMatrix(confu_mat_table6)
    accuracy[time] <- confu_mat6[['overall']][['Accuracy']]
    informations[[time]] <- paste('time:', time, 'esti:', estimators[i], 'depth:', depth[j])
  }
}

best_model <- which(max(accuracy) == accuracy)
parameters <- informations[[best_model[1]]]

train_xgb <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
model6 <- xgboost(train_xgb, nrounds=10, max_depth=3, objective='binary:logistic')
prediction6 <- predict(model6, as.matrix(X_test))
prediction6 <- sapply(prediction6, binary_data)
confu_mat_table6 <- table(prediction6, y_test)
confu_mat6 <- confusionMatrix(confu_mat_table6)
accuracy6 <- confu_mat6[['overall']][['Accuracy']]
precision6 <- confu_mat6[['byClass']][['Precision']]
recall6 <- confu_mat6[['byClass']][['Recall']]
F1_6 <- confu_mat6[['byClass']][['F1']]
print(paste('accuracy:', accuracy6, 
            'precision:', precision6, 
            'recall:', recall6,
            'F1:', F1_6))

### best model ###
final_matrix <- xgb.DMatrix(data = as.matrix(X), label = y)
model_final <- xgboost(final_matrix, nrounds=10, max_depth=3, objective='binary:logistic')
#saveRDS(model_final, 'best_model.rds')
